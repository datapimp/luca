window.Docs = window.Docs || {}; window.Docs.documentation = [{"source":"./source/javascripts/docs/views/components/api_browser/index.coffee","defined_in_file":"./source/javascripts/docs/views/components/api_browser/index.coffee","type":"component_definition","starts_on_line":4,"class_name":"Docs.components.ApiBrowser","header_documentation":"<p>The <code>Docs.components.ApiBrowser</code> is an example of using\na <code>Luca.Container</code> with a <code>@componentEvents</code> configuration\nto broker communication between two child components.</p>\n","type_alias":"api_browser","css_class_identifier":"docs-api-browser","defines_methods":{"runExample":{"defined_on_line":31,"documentation":"","arguments":[]},"loadUrl":{"defined_on_line":35,"documentation":"","arguments":[]}},"defines_properties":{"componentEvents":{"defined_on_line":8,"documentation":"","default":null},"type":{"defined_on_line":12,"documentation":"","default":"\"container\""},"rowFluid":{"defined_on_line":13,"documentation":"","default":"true"},"className":{"defined_on_line":14,"documentation":"","default":"\"url-selector\""},"components":{"defined_on_line":15,"documentation":"","default":"["},"tagName":{"defined_on_line":26,"documentation":"","default":"\"pre\""},"role":{"defined_on_line":28,"documentation":"","default":"\"output\""}},"source_file_contents":"# The `Docs.components.ApiBrowser` is an example of using\n# a `Luca.Container` with a `@componentEvents` configuration\n# to broker communication between two child components.\nview = Docs.register        \"Docs.components.ApiBrowser\"\nview.extends                \"Luca.Container\"\n\nview.configuration\n  componentEvents:\n    \"* button:click\" : \"loadUrl\"\n\nview.contains\n  type: \"container\"\n  rowFluid: true\n  className: \"url-selector\"\n  components:[\n    type: \"text_field\"\n    name: \"endpoint_url\"\n    label: \"Enter a URL\"\n    span: 9\n  ,\n    type: \"button_field\"\n    input_value: \"Browse\"\n    span: 3\n  ]\n,\n  tagName: \"pre\"\n  className: \"prettyprint pre-scrollable\"\n  role: \"output\"\n\nview.privateMethods\n  runExample: ()->\n    @findComponentByName(\"endpoint_url\", true).setValue(\"https://api.github.com/users/datapimp/gists\")\n    @loadUrl()\n\n  loadUrl: ()->\n    url = @findComponentByName(\"endpoint_url\", true).getValue()\n    $.get url, (parsed, state, options)=>\n      @getOutput().$html( options.responseText )\n      window.prettyPrint()\n\nview.register()"},{"source":"./source/javascripts/docs/views/components/component_documentation.coffee","defined_in_file":"./source/javascripts/docs/views/components/component_documentation.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.ComponentDocumentation","header_documentation":"","type_alias":"component_documentation","css_class_identifier":"docs-component-documentation","defines_methods":{"loadComponent":{"defined_on_line":22,"documentation":"<p>Loads a component definition from the documentation objects that\nare generated by the Luca gem&#39;s Luca::LucaApplication#export tool.\nThese objects are the result of parsing component definition files\nand determining the public and private properties and methods, and\nthe documentation that is rendered from their comments.</p>\n","arguments":[{"argument":"@component","value":null}]},"reset":{"defined_on_line":42,"documentation":"","arguments":[]},"renderMethodGroup":{"defined_on_line":47,"documentation":"","arguments":[{"argument":"group","value":"\"public\""}]},"renderPropertyGroup":{"defined_on_line":62,"documentation":"","arguments":[{"argument":"group","value":"\"public\""}]}},"defines_properties":{"bodyTemplate":{"defined_on_line":5,"documentation":"","default":"\"component_documentation\""},"displaySource":{"defined_on_line":10,"documentation":"<p>If set to true, we will render the source code\nfor the component in addition to all of the information\nabout the methods and properties</p>\n","default":"false"},"displayHeader":{"defined_on_line":14,"documentation":"<p>If set to true, we will render the header documentation\nthat is contained in the component</p>\n","default":"false"}},"source_file_contents":"view = Docs.register      \"Docs.views.ComponentDocumentation\"\nview.extends              \"Luca.View\"\n\nview.privateConfiguration\n  bodyTemplate: \"component_documentation\"\n\n  # If set to true, we will render the source code\n  # for the component in addition to all of the information\n  # about the methods and properties\n  displaySource: false\n\n  # If set to true, we will render the header documentation\n  # that is contained in the component\n  displayHeader: false\n\nview.publicMethods\n  # Loads a component definition from the documentation objects that\n  # are generated by the Luca gem's Luca::LucaApplication#export tool.\n  # These objects are the result of parsing component definition files\n  # and determining the public and private properties and methods, and \n  # the documentation that is rendered from their comments.\n  loadComponent: (@component)->\n    @reset()\n\n    for section in [\"private\", \"public\"]\n      @renderMethodGroup(section) \n      @renderPropertyGroup(section) \n\n    @$('.source').hide()\n\n    if @displayHeader is true\n      @$('.header-documentation').show()\n      @$('.header-documentation').html( @component.get(\"header_documentation\") )\n\n    if @displaySource is true\n      @$('.source').show()\n      @$('pre.source').html( @component.contentsWithoutHeader() )      \n\n    @$('pre').addClass('prettyprint')\n\nview.privateMethods\n  reset: ()->\n    @$('.table tbody').empty()\n    @$('.properties,.methods').hide()\n    @$('.header-documentation').hide()\n\n  renderMethodGroup: (group=\"public\")->\n    source = @component?.documentation()?.details[\"#{ group }Methods\"]\n    return if _.isEmpty(source)\n    prototype = Luca.util.resolve(@component.get(\"class_name\"))?.prototype  \n    list = @$(\".methods.#{ group }\").show().find('.table tbody')\n\n    for method, details of source when _.isFunction(prototype[method])\n      details ||= {}\n      arg_details = _( details.arguments ).reduce (memo,pair)->\n        memo += \"#{ pair.argument }\"\n        memo += \"= #{ pair.value || 'undefined' }\" if pair.value?\n        memo += \"<br/>\"\n      , \"\"\n      list.append \"<tr><td>#{ method }</td><td>#{ arg_details }</td><td>#{ details.documentation || \"\" }</td></tr>\"\n\n  renderPropertyGroup: (group=\"public\")->\n    source = @component?.documentation()?.details[\"#{ group }Properties\"]\n    return if _.isEmpty(source)\n    prototype = Luca.util.resolve(@component.get(\"class_name\"))?.prototype\n    list = @$(\".properties.#{ group }\").show().find('.table tbody')\n\n    for method, details of source when not _.isFunction(prototype[method])\n      details ||= {}\n      list.append \"<tr><td>#{ method }</td><td>#{ details.default || \"\" }</td><td>#{ details.documentation || \"\" }</td></tr>\"\n\nview.register()\n"},{"source":"./source/javascripts/docs/views/components/gist_editor/index.coffee","defined_in_file":"./source/javascripts/docs/views/components/gist_editor/index.coffee","type":"component_definition","starts_on_line":3,"class_name":"Docs.components.GistEditor","header_documentation":"","type_alias":"gist_editor","css_class_identifier":"docs-gist-editor","defines_methods":{},"defines_properties":{"role":{"defined_on_line":7,"documentation":"","default":"\"browser\""}},"source_file_contents":"#= require_tree ./components\n#= require_self\neditor = Docs.register    \"Docs.components.GistEditor\"\neditor.extends            \"Luca.Container\"\n\neditor.contains\n  role: \"browser\"\n\neditor.register()"},{"source":"./source/javascripts/docs/views/pages/browse_source/details.coffee","defined_in_file":"./source/javascripts/docs/views/pages/browse_source/details.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.ComponentDetails","header_documentation":"","type_alias":"component_details","css_class_identifier":"docs-component-details","defines_methods":{"loadComponent":{"defined_on_line":10,"documentation":"","arguments":[{"argument":"model","value":null}]},"afterRender":{"defined_on_line":21,"documentation":"","arguments":[]},"load":{"defined_on_line":25,"documentation":"","arguments":[{"argument":"model","value":null}]},"prettyPrint":{"defined_on_line":35,"documentation":"<p>Applies syntax highlighting to all pre elements</p>\n","arguments":[]}},"defines_properties":{"rowFluid":{"defined_on_line":5,"documentation":"","default":"true"},"role":{"defined_on_line":8,"documentation":"","default":"\"documentation\""},"span":{"defined_on_line":9,"documentation":"","default":"5"},"type":{"defined_on_line":15,"documentation":"","default":"\"component_documentation\""},"displaySource":{"defined_on_line":17,"documentation":"","default":"true"}},"source_file_contents":"view = Docs.register    \"Docs.views.ComponentDetails\"\nview.extends            \"Luca.Container\"\n\nview.configuration\n  rowFluid: true\n\nview.contains\n  role: \"documentation\"\n  span: 5\n  loadComponent: (model)->\n    @$el.empty()\n    @$el.append(\"<h2>#{ model.get('class_name') }</h2>\")\n    @$el.append(\"<div class='header-documentation'>#{ model.get('header_documentation') }</div>\")\n,\n  type: \"component_documentation\"\n  role: \"details\"\n  displaySource: true\n  span: 7\n\nview.defines\n  afterRender: ()->\n    @getDetails().$el.hide()\n    @getDocumentation().$el.hide()\n\n  load: (model)->\n    @getDetails().$el.show()\n    @getDocumentation().$el.show()\n\n    @getDetails().loadComponent(model)\n    @getDocumentation().loadComponent(model)\n\n    @prettyPrint()\n\n  # Applies syntax highlighting to all pre elements\n  prettyPrint: ()-> \n    @$('pre').addClass('prettyprint')\n    window.prettyPrint?()\n"},{"source":"./source/javascripts/docs/views/pages/browse_source/list.coffee","defined_in_file":"./source/javascripts/docs/views/pages/browse_source/list.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.ComponentList","header_documentation":"","type_alias":"component_list","css_class_identifier":"docs-component-list","defines_methods":{},"defines_properties":{"paginatable":{"defined_on_line":4,"documentation":"","default":"false"},"maxHeight":{"defined_on_line":5,"documentation":"","default":"200"},"collection":{"defined_on_line":6,"documentation":"","default":"\"luca_documentation\""},"columns":{"defined_on_line":7,"documentation":"","default":"["}},"source_file_contents":"view = Docs.register      \"Docs.views.ComponentList\"\nview.extends              \"Luca.components.ScrollableTable\"\nview.defines\n  paginatable: false\n  maxHeight: 200\n  collection: \"luca_documentation\"\n  columns:[\n    reader: \"class_name\"\n    width: \"20%\"\n    renderer: (name)->\n      \"<a class='link'>#{ name }</a>\"\n  ,\n    reader: \"class_name\"\n    header: \"Extends From\"\n    width: \"20%\"\n    renderer: (className)->\n      if component = Luca.util.resolve(className)\n        name = component.prototype.componentMetaData()?.meta[\"super class name\"]\n        \"<a class='link'>#{ name }</a>\"\n  ,\n    reader: \"type_alias\"\n    header: \"Shortcut\"\n    width: \"10%\"\n  ,\n    reader: \"defined_in_file\"\n    header: \"<i class='icon icon-github'/> Github\"\n    renderer: (file)->\n      shortened = file.split(\"javascripts/luca/\")[1]\n      \"<a href='https://github.com/datapimp/luca/blob/master/app/assets/javascripts/luca/#{ shortened }'>#{ shortened }</a>\"\n  ]\n\n"},{"source":"./source/javascripts/docs/views/pages/browse_source.coffee","defined_in_file":"./source/javascripts/docs/views/pages/browse_source.coffee","type":"component_definition","starts_on_line":3,"class_name":"Docs.views.BrowseSource","header_documentation":"","type_alias":"browse_source","css_class_identifier":"docs-browse-source","defines_methods":{"index":{"defined_on_line":17,"documentation":"","arguments":[]},"show":{"defined_on_line":20,"documentation":"","arguments":[{"argument":"componentName","value":null}]},"selectComponent":{"defined_on_line":28,"documentation":"","arguments":[{"argument":"e","value":null}]}},"defines_properties":{"autoBindEventHandlers":{"defined_on_line":7,"documentation":"","default":"true"},"events":{"defined_on_line":8,"documentation":"","default":null},"component":{"defined_on_line":12,"documentation":"","default":"\"component_list\""}},"source_file_contents":"#= require_tree ./browse_source \n#= require_self\nview = Docs.register \"Docs.views.BrowseSource\"\nview.extends         \"Luca.Container\"\n\nview.configuration\n  autoBindEventHandlers: true\n  events:\n    \"click .docs-component-list a.link\" : \"selectComponent\"\n\nview.contains\n  component: \"component_list\"\n,\n  component: \"component_details\"\n\nview.privateMethods\n  index: ()->\n    @selectComponent(@getComponentList().getCollection().at(0))\n\n  show: (componentName)-> \n    component = @getComponentList().getCollection().detect (model)->\n      model.get(\"class_name\") is componentName\n\n    return @index() unless component?\n\n    @selectComponent(component)\n    \n  selectComponent: (e)->\n    list    = @getComponentList()\n    details = @getComponentDetails() \n\n    if Luca.isBackboneModel(e) \n      model = e\n      index = list.getCollection().indexOf(model)\n      row   = list.$(\"tr[data-index='#{ index }']\")\n    else\n      $target   = @$(e.target)\n      row       = $target.parents('tr').eq(0)\n      index     = row.data('index')\n      model     = list.getCollection().at(index) \n\n    list.$('tr').removeClass('info')\n    row.addClass('info')\n    details.load(model)\n\n"},{"source":"./source/javascripts/docs/views/pages/examples_browser/docs.coffee","defined_in_file":"./source/javascripts/docs/views/pages/examples_browser/docs.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.ExampleDocs","header_documentation":"","type_alias":"example_docs","css_class_identifier":"docs-example-docs","defines_methods":{"beforeRender":{"defined_on_line":6,"documentation":"","arguments":[]}},"defines_properties":{"collection":{"defined_on_line":4,"documentation":"","default":"\"docs_documentation\""},"displayHeader":{"defined_on_line":5,"documentation":"","default":"true"}},"source_file_contents":"view = Docs.register  \"Docs.views.ExampleDocs\"\nview.extends          \"Docs.views.ComponentDocumentation\"\nview.defines\n  collection: \"docs_documentation\"\n  displayHeader: true\n  beforeRender: ()->\n    component = @collection.detect (component)=>\n      component.get(\"type_alias\") is @example\n\n    if component?\n      @loadComponent(component)\n\n"},{"source":"./source/javascripts/docs/views/pages/examples_browser/source.coffee","defined_in_file":"./source/javascripts/docs/views/pages/examples_browser/source.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.ExampleSource","header_documentation":"","type_alias":"example_source","css_class_identifier":"docs-example-source","defines_methods":{"beforeRender":{"defined_on_line":7,"documentation":"","arguments":[]}},"defines_properties":{"tagName":{"defined_on_line":4,"documentation":"","default":"\"pre\""},"className":{"defined_on_line":5,"documentation":"","default":"\"prettyprint pre-scrollable\""},"collection":{"defined_on_line":6,"documentation":"","default":"\"docs_documentation\""}},"source_file_contents":"view = Docs.register  \"Docs.views.ExampleSource\"\nview.extends          \"Luca.View\"\nview.defines\n  tagName: \"pre\"\n  className: \"prettyprint pre-scrollable\"\n  collection: \"docs_documentation\"\n  beforeRender: ()->\n    component = @collection.detect (component)=>\n      component.get(\"type_alias\") is @example\n\n    @$el.html( component.get(\"source_file_contents\") )\n    window.prettyPrint()\n\n"},{"source":"./source/javascripts/docs/views/pages/examples_browser.coffee","defined_in_file":"./source/javascripts/docs/views/pages/examples_browser.coffee","type":"component_definition","starts_on_line":4,"class_name":"Docs.views.ExamplesBrowser","header_documentation":"","type_alias":"examples_browser","css_class_identifier":"docs-examples-browser","defines_methods":{"wrapExampleComponents":{"defined_on_line":25,"documentation":"","arguments":[]},"afterInitialize":{"defined_on_line":57,"documentation":"","arguments":[]},"show":{"defined_on_line":61,"documentation":"","arguments":[{"argument":"exampleName","value":"0"},{"argument":"view","value":"\"component\""}]},"index":{"defined_on_line":67,"documentation":"","arguments":[]}},"defines_properties":{"title":{"defined_on_line":8,"documentation":"","default":"\"API Browser\""},"type":{"defined_on_line":9,"documentation":"","default":"\"api_browser\""},"name":{"defined_on_line":10,"documentation":"","default":"\"api_browser\""},"activeCard":{"defined_on_line":21,"documentation":"","default":"0"},"tab_position":{"defined_on_line":22,"documentation":"","default":"\"left\""}},"source_file_contents":"#= require_tree ./examples_browser\n#= require_self\n\npage = Docs.register \"Docs.views.ExamplesBrowser\"\npage.extends         \"Luca.containers.TabView\"\n\npage.contains\n  title: \"API Browser\"\n  type: \"api_browser\"\n  name: \"api_browser\"\n,\n  title: \"Basic FormView\"\n  type: \"basic_form_view\"\n  name: \"basic_form_view\"\n,\n  title: \"Complex Layout FormView\"\n  type: \"complex_layout_form\"\n  name: \"complex_layout_form\"\n\npage.privateConfiguration\n  activeCard: 0\n  tab_position: \"left\"\n\npage.privateMethods\n  wrapExampleComponents: ()->\n    wrapped = []\n\n    wrapped = _(@components).map (component,index)->\n      title: component.title\n      name: component.name\n      components:[\n        type: \"card\"\n        role: \"view_selector\"\n        afterInitialize: ()->\n          @$el.append(\"<h3>#{ component.title } Example</h3>\")\n        components:[\n          type: component.type\n          name: \"component\"\n        ,\n          type: \"example_source\"\n          example: component.name\n          name: \"source\"\n        ,\n          type: \"example_docs\"\n          example: component.name\n          name: \"documentation\"\n        ]        \n      ,\n        bodyTemplate: \"examples_browser/selector\"\n        bodyTemplateVars: ()->\n         example_name: component.name\n      ]\n\n    @components = wrapped\n    @components.unshift title: \"Overview\", bodyTemplate: \"examples_browser/overview\"\n\n  afterInitialize: ()->\n    @wrapExampleComponents()\n\npage.publicMethods\n  show: (exampleName=0, view=\"component\")->\n    @activate exampleName, false, ()->\n      @getViewSelector().activate(view)\n      @$(\"li\").removeClass(\"active\")\n      @$(\"li.#{view}\").addClass(\"active\")\n\n  index: ()->\n    @show()\n\npage.register()"},{"source":"./source/javascripts/docs/views/pages/home.coffee","defined_in_file":"./source/javascripts/docs/views/pages/home.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.Home","header_documentation":"","type_alias":"home","css_class_identifier":"docs-home","defines_methods":{"index":{"defined_on_line":7,"documentation":"","arguments":[]}},"defines_properties":{"template":{"defined_on_line":4,"documentation":"","default":"\"pages/home\""}},"source_file_contents":"page = Docs.register      \"Docs.views.Home\"\npage.extends              \"Luca.components.Page\"\npage.configuration\n  template: \"pages/home\"\n\npage.defines\n  index: ()->\n    @trigger \"index\"\n\npage.register()"},{"source":"./source/javascripts/docs/views/views/form_view_examples/basic_example.coffee","defined_in_file":"./source/javascripts/docs/views/views/form_view_examples/basic_example.coffee","type":"component_definition","starts_on_line":6,"class_name":"Docs.views.BasicFormView","header_documentation":"<p>The <code>Docs.views.BasicFormView</code> is an example of the <code>Luca.components.FormView</code>.\nIn this basic example, the form contains a range of different fields.  They are\nrendered one on top of another.  You can get more advanced and nest containers within\nyour form, or use a <code>@bodyTemplate</code> and specify your own DOM structure, and assign\ncomponents to custom CSS selectors within it.</p>\n","type_alias":"basic_form_view","css_class_identifier":"docs-basic-form-view","defines_methods":{},"defines_properties":{"defaults":{"defined_on_line":12,"documentation":"<p>Any values you specify in the <code>@defaults</code> property will be\nset on each of the components in this container.</p>\n","default":null},"components":{"defined_on_line":19,"documentation":"<p>You can manually define a <code>@components</code> property, or in your component\ndefinition you can use the special <code>contains</code> directive, the only difference\nis your personal preference for readability.  I did it this way</p>\n","default":"["}},"source_file_contents":"# The `Docs.views.BasicFormView` is an example of the `Luca.components.FormView`.\n# In this basic example, the form contains a range of different fields.  They are\n# rendered one on top of another.  You can get more advanced and nest containers within\n# your form, or use a `@bodyTemplate` and specify your own DOM structure, and assign\n# components to custom CSS selectors within it.\nform = Docs.register    \"Docs.views.BasicFormView\"\nform.extends            \"Luca.components.FormView\"\n\nform.privateConfiguration\n  # Any values you specify in the `@defaults` property will be\n  # set on each of the components in this container.\n  defaults:\n    type: \"text\"\n\nform.publicConfiguration\n  # You can manually define a `@components` property, or in your component\n  # definition you can use the special `contains` directive, the only difference\n  # is your personal preference for readability.  I did it this way \n  components:[\n    label: \"Text Field One\"\n  ,\n    type: \"select\"\n    label: \"Select Field One\"\n    collection:\n      data:[\n        ['Alpha','Alpha']\n        ['Bravo','Bravo']\n        ['Charlie','Charlie']\n        ['Delta','Delta']\n      ]\n  ,\n    type: \"checkbox_field\"\n    label: \"Checkbox Field\"\n\n  ]\n\nform.register()  \n\n"},{"source":"./source/javascripts/docs/views/views/form_view_examples/complex_layout.coffee","defined_in_file":"./source/javascripts/docs/views/views/form_view_examples/complex_layout.coffee","type":"component_definition","starts_on_line":9,"class_name":"Docs.views.ComplexLayoutForm","header_documentation":"<p>The <code>Docs.views.ComplexLayoutForm</code> is an example of a <code>Luca.components.FormView</code> which contains\na nested container, and which uses the bootstrap grid helper properties <code>@rowFluid</code> and <code>@span</code> \nto arrange the nested components inside of a grid layout.\nIn addition to laying out the form components visually, there is a nested <code>Luca.containers.CardView</code>\ncomponent which shows / hides various field sets depending on what options you select on the form.\nThis is an example of how Luca framework components can be assembled together arbitrarily to build\nwhatever type of user interface you can imagine.</p>\n","type_alias":"complex_layout_form","css_class_identifier":"docs-complex-layout-form","defines_methods":{"selectGroup":{"defined_on_line":30,"documentation":"<p>The selectGroup method is bound to the componentEvent listener.  Whenever\nthe group_selector field changes its value, we want to change which field\ngroup is visible on the form.</p>\n","arguments":[]}},"defines_properties":{"rowFluid":{"defined_on_line":17,"documentation":"<p>By setting <code>@rowFluid</code> to true, this container\nwill support the twitter bootstrap grid layout.  Applying\nthe <code>@span</code> property to the direct children of this component\nwill control their width</p>\n","default":"true"},"componentEvents":{"defined_on_line":23,"documentation":"<p>Here is an example of using the <code>@componentEvents</code> property to listen\nto the change event on the select field identified by the role &#39;group_selector&#39;.\nonce that field emits its change event, we change the active display card in the\nnested card selector.</p>\n","default":null},"type":{"defined_on_line":36,"documentation":"","default":"\"container\""},"span":{"defined_on_line":37,"documentation":"","default":"6"},"components":{"defined_on_line":38,"documentation":"","default":"["}},"source_file_contents":"# The `Docs.views.ComplexLayoutForm` is an example of a `Luca.components.FormView` which contains\n# a nested container, and which uses the bootstrap grid helper properties `@rowFluid` and `@span` \n# to arrange the nested components inside of a grid layout.\n#\n# In addition to laying out the form components visually, there is a nested `Luca.containers.CardView`\n# component which shows / hides various field sets depending on what options you select on the form.\n# This is an example of how Luca framework components can be assembled together arbitrarily to build\n# whatever type of user interface you can imagine.\nform = Docs.register      \"Docs.views.ComplexLayoutForm\"\nform.extends              \"Luca.components.FormView\"\n\nform.privateConfiguration\n  # By setting `@rowFluid` to true, this container\n  # will support the twitter bootstrap grid layout.  Applying\n  # the `@span` property to the direct children of this component\n  # will control their width \n  rowFluid: true\n\n  # Here is an example of using the `@componentEvents` property to listen\n  # to the change event on the select field identified by the role 'group_selector'.\n  # once that field emits its change event, we change the active display card in the\n  # nested card selector.\n  componentEvents:\n    \"group_selector on:change\" : \"selectGroup\"\n\nform.privateMethods\n  # The selectGroup method is bound to the componentEvent listener.  Whenever\n  # the group_selector field changes its value, we want to change which field\n  # group is visible on the form.\n  selectGroup: ()->\n    desiredGroup = @getGroupSelector().getValue()\n    selector = @getGroupDisplaySelector()\n    selector.activate(desiredGroup) \n\nform.contains\n  type: \"container\"\n  span: 6\n  components:[\n    type: \"text\"\n    label: \"Field One\"\n  ,\n    type: \"text\"\n    label: \"Field Two\"\n  ,\n    type: \"text\"\n    label: \"Field Three\"\n  ]\n,\n  type: \"container\"\n  span: 6\n  components:[\n    label: \"Select a Group\"\n    type: \"select\"\n    role: \"group_selector\"\n    includeBlank: false\n    valueType: \"string\"\n    collection:\n      data:[\n        [\"alpha\",\"Alpha Group\"]\n        [\"bravo\", \"Bravo Group\"]\n        [\"charlie\",\"Charlie Group\"]\n      ]\n  ,\n    type: \"card\"\n    role: \"group_display_selector\"\n    components:[\n      name: \"alpha\"\n      defaults:\n        type: \"text\"\n      components:[\n        type: \"view\"\n        tagName: \"h4\"\n        bodyTemplate: ()-> \"Group One\"\n      , \n        label: \"Alpha\"\n      ,\n        label: \"Bravo\"\n      ,\n        label: \"Charlie\"\n      ]\n    ,\n      name: \"bravo\"\n      defaults:\n        type: \"checkbox_field\"\n      components:[\n        type: \"view\"\n        tagName: \"h4\"\n        bodyTemplate: ()-> \"Group Two\"\n      ,\n        label: \"One\"\n      ,\n        label: \"Two\"\n      ]\n    ,\n      name: \"charlie\"\n      defaults:\n        type: \"button_field\"      \n      components:[\n        type: \"view\"\n        tagName: \"h4\"\n        bodyTemplate: ()-> \"Group Three\"\n      ,\n        input_value: \"Button One\"\n        icon_class: \"chevron-up\"\n      ,\n        input_value: \"Button Two\"\n        icon_class: \"pencil\"\n      ] \n    ]\n  ]"},{"source":"./source/javascripts/docs/views/views/top_navigation.coffee","defined_in_file":"./source/javascripts/docs/views/views/top_navigation.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.TopNavigation","header_documentation":"","type_alias":"top_navigation","css_class_identifier":"docs-top-navigation","defines_methods":{},"defines_properties":{"brand":{"defined_on_line":4,"documentation":"","default":"\"Luca.js\""},"inverse":{"defined_on_line":5,"documentation":"","default":"true"},"orientation":{"defined_on_line":6,"documentation":"","default":"\"top\""}},"source_file_contents":"nav = Docs.register       \"Docs.views.TopNavigation\"\nnav.extends               \"Luca.components.NavBar\"\nnav.defines\n  brand: \"Luca.js\"\n  inverse: true\n  orientation: \"top\"\n"},{"source":"./source/javascripts/docs/collections/docs_documentation.coffee","defined_in_file":"./source/javascripts/docs/collections/docs_documentation.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.collections.DocsDocumentation","header_documentation":"","type_alias":"docs_documentation","css_class_identifier":"","defines_methods":{"getSource":{"defined_on_line":7,"documentation":"","arguments":[]},"fetch":{"defined_on_line":10,"documentation":"","arguments":[]}},"defines_properties":{"model":{"defined_on_line":4,"documentation":"","default":"Docs.models.Component"},"appNamespace":{"defined_on_line":5,"documentation":"","default":"\"Docs\""}},"source_file_contents":"collection = Docs.register        \"Docs.collections.DocsDocumentation\"\ncollection.extends                \"Luca.Collection\"\ncollection.defines\n  model: Docs.models.Component\n  appNamespace: \"Docs\"\n\n  getSource: ()->\n    Luca.util.resolve(\"#{ @appNamespace }.documentation\")\n\n  fetch: ()->\n    models = _( @getSource() ).sortBy(\"class_name\")\n    found = {}\n    models = for model in models when not found[ model.class_name ]\n      found[ model.class_name ] = true\n      model\n\n    @reset(models)"},{"source":"./source/javascripts/docs/collections/luca_documentation.coffee","defined_in_file":"./source/javascripts/docs/collections/luca_documentation.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.collections.LucaDocumentation","header_documentation":"","type_alias":"luca_documentation","css_class_identifier":"","defines_methods":{"getSource":{"defined_on_line":7,"documentation":"","arguments":[]},"fetch":{"defined_on_line":10,"documentation":"","arguments":[]}},"defines_properties":{"model":{"defined_on_line":4,"documentation":"","default":"Docs.models.Component"},"appNamespace":{"defined_on_line":5,"documentation":"","default":"\"Luca\""}},"source_file_contents":"collection = Docs.register        \"Docs.collections.LucaDocumentation\"\ncollection.extends                \"Luca.Collection\"\ncollection.defines\n  model: Docs.models.Component\n  appNamespace: \"Luca\"\n\n  getSource: ()->\n    Luca.util.resolve(\"#{ @appNamespace }.documentation\")\n\n  fetch: ()->\n    models = _( @getSource() ).sortBy(\"class_name\")\n    found = {}\n    models = for model in models when not found[ model.class_name ]\n      found[ model.class_name ] = true\n      model\n\n    @reset(models)"},{"source":"./source/javascripts/docs/collections/public_gists.coffee","defined_in_file":"./source/javascripts/docs/collections/public_gists.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.collections.PublicGists","header_documentation":"","type_alias":"public_gists","css_class_identifier":"","defines_methods":{},"defines_properties":{"fetch":{"defined_on_line":4,"documentation":"","default":"Backbone.Collection"}},"source_file_contents":"collection = Docs.register  \"Docs.collections.PublicGists\"\ncollection.extends          \"Luca.Collection\"\ncollection.defines\n  fetch: Backbone.Collection::fetch"},{"source":"./source/javascripts/docs/models/component.coffee","defined_in_file":"./source/javascripts/docs/models/component.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.models.Component","header_documentation":"","type_alias":"component","css_class_identifier":"","defines_methods":{"contentsWithoutHeader":{"defined_on_line":15,"documentation":"","arguments":[]},"documentation":{"defined_on_line":25,"documentation":"","arguments":[]},"methodDocumentationFor":{"defined_on_line":38,"documentation":"","arguments":[{"argument":"groups...","value":null}]},"propertyDocumentationFor":{"defined_on_line":51,"documentation":"","arguments":[{"argument":"groups...","value":null}]},"url":{"defined_on_line":64,"documentation":"","arguments":[]},"metaData":{"defined_on_line":67,"documentation":"","arguments":[]},"classNameId":{"defined_on_line":70,"documentation":"","arguments":[]},"componentGroup":{"defined_on_line":73,"documentation":"","arguments":[]},"componentType":{"defined_on_line":77,"documentation":"","arguments":[]},"componentTypeAlias":{"defined_on_line":96,"documentation":"","arguments":[]}},"defines_properties":{"defaults":{"defined_on_line":5,"documentation":"","default":null},"idAttribute":{"defined_on_line":13,"documentation":"","default":"\"class_name\""}},"source_file_contents":"model = Docs.register  \"Docs.models.Component\"\nmodel.extends           \"Luca.Model\"\n\nmodel.configuration\n  defaults:\n    class_name: undefined\n    superClass: undefined\n    asset_id: undefined\n    source_file_contents: \"\"\n    defined_in_file: \"\"\n\nmodel.defines\n  idAttribute: \"class_name\"\n  \n  contentsWithoutHeader: ()->\n    startsAt  = @get(\"starts_on_line\") || 0\n    contents  = @get(\"source_file_contents\").split(\"\\n\")\n    count     = contents.length \n\n    if startsAt > 0\n      startsAt = startsAt - 1\n\n    contents.slice(startsAt, count).join(\"\\n\")\n\n  documentation: ()->\n    base = _( @toJSON() ).pick 'header_documentation', 'class_name', 'defined_in_file'\n\n    _.extend base, @metaData(), \n      componentGroup: @componentGroup() \n      componentType: @componentType() \n      componentTypeAlias: @componentTypeAlias()\n      details:\n        publicMethods:        @methodDocumentationFor(\"publicMethods\")\n        privateMethods:       @methodDocumentationFor(\"privateMethods\")\n        privateProperties:    @propertyDocumentationFor(\"privateProperties\",\"privateConfiguration\")\n        publicProperties:     @propertyDocumentationFor(\"publicProperties\",\"publicConfiguration\")\n\n  methodDocumentationFor: (groups...)->\n    documentationSource = _.extend({}, @get(\"defines_methods\"))\n    result = {}\n\n    for group in groups\n      if list = @metaData()?[ group ]?()\n        _.extend result, _(list).reduce (memo, methodOrProperty)->\n          memo[ methodOrProperty ] = documentationSource[ methodOrProperty ]\n          memo\n        , {}  \n\n    result    \n\n  propertyDocumentationFor: (groups...)->\n    documentationSource = _.extend({}, @get(\"defines_properties\"))\n    result = {}\n\n    for group in groups\n      if list = @metaData()?[ group ]?()\n        _.extend result, _(list).reduce (memo, methodOrProperty)->\n          memo[ methodOrProperty ] = documentationSource[ methodOrProperty ]\n          memo\n        , {}  \n\n    result\n\n  url: ()->\n    \"/project/components/#{ Luca.namespace }/#{ @classNameId() }\"\n\n  metaData: ()->\n    Luca.util.resolve( @get(\"class_name\") )?.prototype.componentMetaData()\n\n  classNameId: ()->\n    @get(\"class_name\").replace(/\\./g,'__')\n\n  componentGroup: ()->\n    parts = @get('class_name').split('.')\n    parts.slice(0,2).join('.')\n\n  componentType: ()->\n    type  = \"view\"\n    parts = @get('class_name').split('.')\n\n    switch group = parts[1]\n      when \"collections\" then \"collection\"\n      when \"models\" then \"model\"\n      when (\"views\" || \"components\" || \"pages\") then \"view\"\n\n    return if group?\n\n    if componentPrototype = Luca.util.resolve( @get(\"class_name\") )\n      return \"view\" if Luca.isViewPrototype( componentPrototype:: )\n      return \"collection\" if Luca.isCollectionPrototype( componentPrototype:: )\n      return \"model\" if Luca.isModelProtoype( componentPrototype:: )\n\n    # meh, but what about Router?\n    \"view\"\n\n  componentTypeAlias: ()->\n    parts = @get('class_name').split('.')\n    name = parts.pop()\n    _.str.underscored( name )\n"},{"source":"./source/javascripts/docs/application.coffee","defined_in_file":"./source/javascripts/docs/application.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.Application","header_documentation":"","type_alias":"application","css_class_identifier":"docs-application","defines_methods":{},"defines_properties":{"el":{"defined_on_line":4,"documentation":"","default":"\"#viewport\""},"fluid":{"defined_on_line":5,"documentation":"","default":"true"},"fullscreen":{"defined_on_line":6,"documentation":"","default":"true"},"applyWrapper":{"defined_on_line":7,"documentation":"","default":"false"},"name":{"defined_on_line":8,"documentation":"","default":"\"DocsApp\""},"collectionManager":{"defined_on_line":11,"documentation":"","default":null},"router":{"defined_on_line":17,"documentation":"","default":"\"Docs.Router\""},"routes":{"defined_on_line":19,"documentation":"","default":null},"component":{"defined_on_line":29,"documentation":"","default":"\"home\""},"type":{"defined_on_line":36,"documentation":"","default":"\"page\""},"layout":{"defined_on_line":37,"documentation":"","default":"\"pages/getting_started\""},"index":{"defined_on_line":38,"documentation":"","default":"_.once ()->"}},"source_file_contents":"app = Docs.register       \"Docs.Application\"\napp.extends               \"Luca.Application\"\napp.configuration\n  el: \"#viewport\"\n  fluid: true\n  fullscreen: true\n  applyWrapper: false\n  name: \"DocsApp\"\n\napp.configuration\n  collectionManager: \n    initialCollections:[\n      \"luca_documentation\"\n      \"docs_documentation\"\n    ]\n\n  router: \"Docs.Router\"\n  \n  routes:\n    \"\":                                 \"home#index\"\n    \"docs\":                             \"browse_source#index\"\n    \"docs/:component_name\":             \"browse_source#show\"\n    \"get-started\":                      \"getting_started#index\"\n    \"examples\":                         \"examples_browser#index\"\n    \"examples/:example_name/:section\":  \"examples_browser#show\"\n    \"examples/:example_name\":           \"examples_browser#show\"\n\napp.contains\n  component: \"home\"\n,\n  component: \"browse_source\"\n,\n  component: \"examples_browser\"\n,\n  name: \"getting_started\"\n  type: \"page\"\n  layout: \"pages/getting_started\"\n  index: _.once ()->\n    @$('pre').addClass('prettyprint')\n    window.prettyPrint() \n\napp.register()"},{"source":"./source/javascripts/docs/collections/docs_documentation.coffee","defined_in_file":"./source/javascripts/docs/collections/docs_documentation.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.collections.DocsDocumentation","header_documentation":"","type_alias":"docs_documentation","css_class_identifier":"","defines_methods":{"getSource":{"defined_on_line":7,"documentation":"","arguments":[]},"fetch":{"defined_on_line":10,"documentation":"","arguments":[]}},"defines_properties":{"model":{"defined_on_line":4,"documentation":"","default":"Docs.models.Component"},"appNamespace":{"defined_on_line":5,"documentation":"","default":"\"Docs\""}},"source_file_contents":"collection = Docs.register        \"Docs.collections.DocsDocumentation\"\ncollection.extends                \"Luca.Collection\"\ncollection.defines\n  model: Docs.models.Component\n  appNamespace: \"Docs\"\n\n  getSource: ()->\n    Luca.util.resolve(\"#{ @appNamespace }.documentation\")\n\n  fetch: ()->\n    models = _( @getSource() ).sortBy(\"class_name\")\n    found = {}\n    models = for model in models when not found[ model.class_name ]\n      found[ model.class_name ] = true\n      model\n\n    @reset(models)"},{"source":"./source/javascripts/docs/collections/luca_documentation.coffee","defined_in_file":"./source/javascripts/docs/collections/luca_documentation.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.collections.LucaDocumentation","header_documentation":"","type_alias":"luca_documentation","css_class_identifier":"","defines_methods":{"getSource":{"defined_on_line":7,"documentation":"","arguments":[]},"fetch":{"defined_on_line":10,"documentation":"","arguments":[]}},"defines_properties":{"model":{"defined_on_line":4,"documentation":"","default":"Docs.models.Component"},"appNamespace":{"defined_on_line":5,"documentation":"","default":"\"Luca\""}},"source_file_contents":"collection = Docs.register        \"Docs.collections.LucaDocumentation\"\ncollection.extends                \"Luca.Collection\"\ncollection.defines\n  model: Docs.models.Component\n  appNamespace: \"Luca\"\n\n  getSource: ()->\n    Luca.util.resolve(\"#{ @appNamespace }.documentation\")\n\n  fetch: ()->\n    models = _( @getSource() ).sortBy(\"class_name\")\n    found = {}\n    models = for model in models when not found[ model.class_name ]\n      found[ model.class_name ] = true\n      model\n\n    @reset(models)"},{"source":"./source/javascripts/docs/collections/public_gists.coffee","defined_in_file":"./source/javascripts/docs/collections/public_gists.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.collections.PublicGists","header_documentation":"","type_alias":"public_gists","css_class_identifier":"","defines_methods":{},"defines_properties":{"fetch":{"defined_on_line":4,"documentation":"","default":"Backbone.Collection"}},"source_file_contents":"collection = Docs.register  \"Docs.collections.PublicGists\"\ncollection.extends          \"Luca.Collection\"\ncollection.defines\n  fetch: Backbone.Collection::fetch"},{"source":"./source/javascripts/docs/lib/router.coffee","defined_in_file":"./source/javascripts/docs/lib/router.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.Router","header_documentation":"","type_alias":"router","css_class_identifier":"docs-router","defines_methods":{},"defines_properties":{},"source_file_contents":"router = Docs.register \"Docs.Router\"\nrouter.extends         \"Luca.Router\"\nrouter.defines()"},{"source":"./source/javascripts/docs/models/component.coffee","defined_in_file":"./source/javascripts/docs/models/component.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.models.Component","header_documentation":"","type_alias":"component","css_class_identifier":"","defines_methods":{"contentsWithoutHeader":{"defined_on_line":15,"documentation":"","arguments":[]},"documentation":{"defined_on_line":25,"documentation":"","arguments":[]},"methodDocumentationFor":{"defined_on_line":38,"documentation":"","arguments":[{"argument":"groups...","value":null}]},"propertyDocumentationFor":{"defined_on_line":51,"documentation":"","arguments":[{"argument":"groups...","value":null}]},"url":{"defined_on_line":64,"documentation":"","arguments":[]},"metaData":{"defined_on_line":67,"documentation":"","arguments":[]},"classNameId":{"defined_on_line":70,"documentation":"","arguments":[]},"componentGroup":{"defined_on_line":73,"documentation":"","arguments":[]},"componentType":{"defined_on_line":77,"documentation":"","arguments":[]},"componentTypeAlias":{"defined_on_line":96,"documentation":"","arguments":[]}},"defines_properties":{"defaults":{"defined_on_line":5,"documentation":"","default":null},"idAttribute":{"defined_on_line":13,"documentation":"","default":"\"class_name\""}},"source_file_contents":"model = Docs.register  \"Docs.models.Component\"\nmodel.extends           \"Luca.Model\"\n\nmodel.configuration\n  defaults:\n    class_name: undefined\n    superClass: undefined\n    asset_id: undefined\n    source_file_contents: \"\"\n    defined_in_file: \"\"\n\nmodel.defines\n  idAttribute: \"class_name\"\n  \n  contentsWithoutHeader: ()->\n    startsAt  = @get(\"starts_on_line\") || 0\n    contents  = @get(\"source_file_contents\").split(\"\\n\")\n    count     = contents.length \n\n    if startsAt > 0\n      startsAt = startsAt - 1\n\n    contents.slice(startsAt, count).join(\"\\n\")\n\n  documentation: ()->\n    base = _( @toJSON() ).pick 'header_documentation', 'class_name', 'defined_in_file'\n\n    _.extend base, @metaData(), \n      componentGroup: @componentGroup() \n      componentType: @componentType() \n      componentTypeAlias: @componentTypeAlias()\n      details:\n        publicMethods:        @methodDocumentationFor(\"publicMethods\")\n        privateMethods:       @methodDocumentationFor(\"privateMethods\")\n        privateProperties:    @propertyDocumentationFor(\"privateProperties\",\"privateConfiguration\")\n        publicProperties:     @propertyDocumentationFor(\"publicProperties\",\"publicConfiguration\")\n\n  methodDocumentationFor: (groups...)->\n    documentationSource = _.extend({}, @get(\"defines_methods\"))\n    result = {}\n\n    for group in groups\n      if list = @metaData()?[ group ]?()\n        _.extend result, _(list).reduce (memo, methodOrProperty)->\n          memo[ methodOrProperty ] = documentationSource[ methodOrProperty ]\n          memo\n        , {}  \n\n    result    \n\n  propertyDocumentationFor: (groups...)->\n    documentationSource = _.extend({}, @get(\"defines_properties\"))\n    result = {}\n\n    for group in groups\n      if list = @metaData()?[ group ]?()\n        _.extend result, _(list).reduce (memo, methodOrProperty)->\n          memo[ methodOrProperty ] = documentationSource[ methodOrProperty ]\n          memo\n        , {}  \n\n    result\n\n  url: ()->\n    \"/project/components/#{ Luca.namespace }/#{ @classNameId() }\"\n\n  metaData: ()->\n    Luca.util.resolve( @get(\"class_name\") )?.prototype.componentMetaData()\n\n  classNameId: ()->\n    @get(\"class_name\").replace(/\\./g,'__')\n\n  componentGroup: ()->\n    parts = @get('class_name').split('.')\n    parts.slice(0,2).join('.')\n\n  componentType: ()->\n    type  = \"view\"\n    parts = @get('class_name').split('.')\n\n    switch group = parts[1]\n      when \"collections\" then \"collection\"\n      when \"models\" then \"model\"\n      when (\"views\" || \"components\" || \"pages\") then \"view\"\n\n    return if group?\n\n    if componentPrototype = Luca.util.resolve( @get(\"class_name\") )\n      return \"view\" if Luca.isViewPrototype( componentPrototype:: )\n      return \"collection\" if Luca.isCollectionPrototype( componentPrototype:: )\n      return \"model\" if Luca.isModelProtoype( componentPrototype:: )\n\n    # meh, but what about Router?\n    \"view\"\n\n  componentTypeAlias: ()->\n    parts = @get('class_name').split('.')\n    name = parts.pop()\n    _.str.underscored( name )\n"},{"source":"./source/javascripts/docs/views/components/api_browser/index.coffee","defined_in_file":"./source/javascripts/docs/views/components/api_browser/index.coffee","type":"component_definition","starts_on_line":4,"class_name":"Docs.components.ApiBrowser","header_documentation":"<p>The <code>Docs.components.ApiBrowser</code> is an example of using\na <code>Luca.Container</code> with a <code>@componentEvents</code> configuration\nto broker communication between two child components.</p>\n","type_alias":"api_browser","css_class_identifier":"docs-api-browser","defines_methods":{"runExample":{"defined_on_line":31,"documentation":"","arguments":[]},"loadUrl":{"defined_on_line":35,"documentation":"","arguments":[]}},"defines_properties":{"componentEvents":{"defined_on_line":8,"documentation":"","default":null},"type":{"defined_on_line":12,"documentation":"","default":"\"container\""},"rowFluid":{"defined_on_line":13,"documentation":"","default":"true"},"className":{"defined_on_line":14,"documentation":"","default":"\"url-selector\""},"components":{"defined_on_line":15,"documentation":"","default":"["},"tagName":{"defined_on_line":26,"documentation":"","default":"\"pre\""},"role":{"defined_on_line":28,"documentation":"","default":"\"output\""}},"source_file_contents":"# The `Docs.components.ApiBrowser` is an example of using\n# a `Luca.Container` with a `@componentEvents` configuration\n# to broker communication between two child components.\nview = Docs.register        \"Docs.components.ApiBrowser\"\nview.extends                \"Luca.Container\"\n\nview.configuration\n  componentEvents:\n    \"* button:click\" : \"loadUrl\"\n\nview.contains\n  type: \"container\"\n  rowFluid: true\n  className: \"url-selector\"\n  components:[\n    type: \"text_field\"\n    name: \"endpoint_url\"\n    label: \"Enter a URL\"\n    span: 9\n  ,\n    type: \"button_field\"\n    input_value: \"Browse\"\n    span: 3\n  ]\n,\n  tagName: \"pre\"\n  className: \"prettyprint pre-scrollable\"\n  role: \"output\"\n\nview.privateMethods\n  runExample: ()->\n    @findComponentByName(\"endpoint_url\", true).setValue(\"https://api.github.com/users/datapimp/gists\")\n    @loadUrl()\n\n  loadUrl: ()->\n    url = @findComponentByName(\"endpoint_url\", true).getValue()\n    $.get url, (parsed, state, options)=>\n      @getOutput().$html( options.responseText )\n      window.prettyPrint()\n\nview.register()"},{"source":"./source/javascripts/docs/views/components/component_documentation.coffee","defined_in_file":"./source/javascripts/docs/views/components/component_documentation.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.ComponentDocumentation","header_documentation":"","type_alias":"component_documentation","css_class_identifier":"docs-component-documentation","defines_methods":{"loadComponent":{"defined_on_line":22,"documentation":"<p>Loads a component definition from the documentation objects that\nare generated by the Luca gem&#39;s Luca::LucaApplication#export tool.\nThese objects are the result of parsing component definition files\nand determining the public and private properties and methods, and\nthe documentation that is rendered from their comments.</p>\n","arguments":[{"argument":"@component","value":null}]},"reset":{"defined_on_line":42,"documentation":"","arguments":[]},"renderMethodGroup":{"defined_on_line":47,"documentation":"","arguments":[{"argument":"group","value":"\"public\""}]},"renderPropertyGroup":{"defined_on_line":62,"documentation":"","arguments":[{"argument":"group","value":"\"public\""}]}},"defines_properties":{"bodyTemplate":{"defined_on_line":5,"documentation":"","default":"\"component_documentation\""},"displaySource":{"defined_on_line":10,"documentation":"<p>If set to true, we will render the source code\nfor the component in addition to all of the information\nabout the methods and properties</p>\n","default":"false"},"displayHeader":{"defined_on_line":14,"documentation":"<p>If set to true, we will render the header documentation\nthat is contained in the component</p>\n","default":"false"}},"source_file_contents":"view = Docs.register      \"Docs.views.ComponentDocumentation\"\nview.extends              \"Luca.View\"\n\nview.privateConfiguration\n  bodyTemplate: \"component_documentation\"\n\n  # If set to true, we will render the source code\n  # for the component in addition to all of the information\n  # about the methods and properties\n  displaySource: false\n\n  # If set to true, we will render the header documentation\n  # that is contained in the component\n  displayHeader: false\n\nview.publicMethods\n  # Loads a component definition from the documentation objects that\n  # are generated by the Luca gem's Luca::LucaApplication#export tool.\n  # These objects are the result of parsing component definition files\n  # and determining the public and private properties and methods, and \n  # the documentation that is rendered from their comments.\n  loadComponent: (@component)->\n    @reset()\n\n    for section in [\"private\", \"public\"]\n      @renderMethodGroup(section) \n      @renderPropertyGroup(section) \n\n    @$('.source').hide()\n\n    if @displayHeader is true\n      @$('.header-documentation').show()\n      @$('.header-documentation').html( @component.get(\"header_documentation\") )\n\n    if @displaySource is true\n      @$('.source').show()\n      @$('pre.source').html( @component.contentsWithoutHeader() )      \n\n    @$('pre').addClass('prettyprint')\n\nview.privateMethods\n  reset: ()->\n    @$('.table tbody').empty()\n    @$('.properties,.methods').hide()\n    @$('.header-documentation').hide()\n\n  renderMethodGroup: (group=\"public\")->\n    source = @component?.documentation()?.details[\"#{ group }Methods\"]\n    return if _.isEmpty(source)\n    prototype = Luca.util.resolve(@component.get(\"class_name\"))?.prototype  \n    list = @$(\".methods.#{ group }\").show().find('.table tbody')\n\n    for method, details of source when _.isFunction(prototype[method])\n      details ||= {}\n      arg_details = _( details.arguments ).reduce (memo,pair)->\n        memo += \"#{ pair.argument }\"\n        memo += \"= #{ pair.value || 'undefined' }\" if pair.value?\n        memo += \"<br/>\"\n      , \"\"\n      list.append \"<tr><td>#{ method }</td><td>#{ arg_details }</td><td>#{ details.documentation || \"\" }</td></tr>\"\n\n  renderPropertyGroup: (group=\"public\")->\n    source = @component?.documentation()?.details[\"#{ group }Properties\"]\n    return if _.isEmpty(source)\n    prototype = Luca.util.resolve(@component.get(\"class_name\"))?.prototype\n    list = @$(\".properties.#{ group }\").show().find('.table tbody')\n\n    for method, details of source when not _.isFunction(prototype[method])\n      details ||= {}\n      list.append \"<tr><td>#{ method }</td><td>#{ details.default || \"\" }</td><td>#{ details.documentation || \"\" }</td></tr>\"\n\nview.register()\n"},{"source":"./source/javascripts/docs/views/components/gist_editor/index.coffee","defined_in_file":"./source/javascripts/docs/views/components/gist_editor/index.coffee","type":"component_definition","starts_on_line":3,"class_name":"Docs.components.GistEditor","header_documentation":"","type_alias":"gist_editor","css_class_identifier":"docs-gist-editor","defines_methods":{},"defines_properties":{"role":{"defined_on_line":7,"documentation":"","default":"\"browser\""}},"source_file_contents":"#= require_tree ./components\n#= require_self\neditor = Docs.register    \"Docs.components.GistEditor\"\neditor.extends            \"Luca.Container\"\n\neditor.contains\n  role: \"browser\"\n\neditor.register()"},{"source":"./source/javascripts/docs/views/pages/browse_source/details.coffee","defined_in_file":"./source/javascripts/docs/views/pages/browse_source/details.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.ComponentDetails","header_documentation":"","type_alias":"component_details","css_class_identifier":"docs-component-details","defines_methods":{"loadComponent":{"defined_on_line":10,"documentation":"","arguments":[{"argument":"model","value":null}]},"afterRender":{"defined_on_line":21,"documentation":"","arguments":[]},"load":{"defined_on_line":25,"documentation":"","arguments":[{"argument":"model","value":null}]},"prettyPrint":{"defined_on_line":35,"documentation":"<p>Applies syntax highlighting to all pre elements</p>\n","arguments":[]}},"defines_properties":{"rowFluid":{"defined_on_line":5,"documentation":"","default":"true"},"role":{"defined_on_line":8,"documentation":"","default":"\"documentation\""},"span":{"defined_on_line":9,"documentation":"","default":"5"},"type":{"defined_on_line":15,"documentation":"","default":"\"component_documentation\""},"displaySource":{"defined_on_line":17,"documentation":"","default":"true"}},"source_file_contents":"view = Docs.register    \"Docs.views.ComponentDetails\"\nview.extends            \"Luca.Container\"\n\nview.configuration\n  rowFluid: true\n\nview.contains\n  role: \"documentation\"\n  span: 5\n  loadComponent: (model)->\n    @$el.empty()\n    @$el.append(\"<h2>#{ model.get('class_name') }</h2>\")\n    @$el.append(\"<div class='header-documentation'>#{ model.get('header_documentation') }</div>\")\n,\n  type: \"component_documentation\"\n  role: \"details\"\n  displaySource: true\n  span: 7\n\nview.defines\n  afterRender: ()->\n    @getDetails().$el.hide()\n    @getDocumentation().$el.hide()\n\n  load: (model)->\n    @getDetails().$el.show()\n    @getDocumentation().$el.show()\n\n    @getDetails().loadComponent(model)\n    @getDocumentation().loadComponent(model)\n\n    @prettyPrint()\n\n  # Applies syntax highlighting to all pre elements\n  prettyPrint: ()-> \n    @$('pre').addClass('prettyprint')\n    window.prettyPrint?()\n"},{"source":"./source/javascripts/docs/views/pages/browse_source/list.coffee","defined_in_file":"./source/javascripts/docs/views/pages/browse_source/list.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.ComponentList","header_documentation":"","type_alias":"component_list","css_class_identifier":"docs-component-list","defines_methods":{},"defines_properties":{"paginatable":{"defined_on_line":4,"documentation":"","default":"false"},"maxHeight":{"defined_on_line":5,"documentation":"","default":"200"},"collection":{"defined_on_line":6,"documentation":"","default":"\"luca_documentation\""},"columns":{"defined_on_line":7,"documentation":"","default":"["}},"source_file_contents":"view = Docs.register      \"Docs.views.ComponentList\"\nview.extends              \"Luca.components.ScrollableTable\"\nview.defines\n  paginatable: false\n  maxHeight: 200\n  collection: \"luca_documentation\"\n  columns:[\n    reader: \"class_name\"\n    width: \"20%\"\n    renderer: (name)->\n      \"<a class='link'>#{ name }</a>\"\n  ,\n    reader: \"class_name\"\n    header: \"Extends From\"\n    width: \"20%\"\n    renderer: (className)->\n      if component = Luca.util.resolve(className)\n        name = component.prototype.componentMetaData()?.meta[\"super class name\"]\n        \"<a class='link'>#{ name }</a>\"\n  ,\n    reader: \"type_alias\"\n    header: \"Shortcut\"\n    width: \"10%\"\n  ,\n    reader: \"defined_in_file\"\n    header: \"<i class='icon icon-github'/> Github\"\n    renderer: (file)->\n      shortened = file.split(\"javascripts/luca/\")[1]\n      \"<a href='https://github.com/datapimp/luca/blob/master/app/assets/javascripts/luca/#{ shortened }'>#{ shortened }</a>\"\n  ]\n\n"},{"source":"./source/javascripts/docs/views/pages/browse_source.coffee","defined_in_file":"./source/javascripts/docs/views/pages/browse_source.coffee","type":"component_definition","starts_on_line":3,"class_name":"Docs.views.BrowseSource","header_documentation":"","type_alias":"browse_source","css_class_identifier":"docs-browse-source","defines_methods":{"index":{"defined_on_line":17,"documentation":"","arguments":[]},"show":{"defined_on_line":20,"documentation":"","arguments":[{"argument":"componentName","value":null}]},"selectComponent":{"defined_on_line":28,"documentation":"","arguments":[{"argument":"e","value":null}]}},"defines_properties":{"autoBindEventHandlers":{"defined_on_line":7,"documentation":"","default":"true"},"events":{"defined_on_line":8,"documentation":"","default":null},"component":{"defined_on_line":12,"documentation":"","default":"\"component_list\""}},"source_file_contents":"#= require_tree ./browse_source \n#= require_self\nview = Docs.register \"Docs.views.BrowseSource\"\nview.extends         \"Luca.Container\"\n\nview.configuration\n  autoBindEventHandlers: true\n  events:\n    \"click .docs-component-list a.link\" : \"selectComponent\"\n\nview.contains\n  component: \"component_list\"\n,\n  component: \"component_details\"\n\nview.privateMethods\n  index: ()->\n    @selectComponent(@getComponentList().getCollection().at(0))\n\n  show: (componentName)-> \n    component = @getComponentList().getCollection().detect (model)->\n      model.get(\"class_name\") is componentName\n\n    return @index() unless component?\n\n    @selectComponent(component)\n    \n  selectComponent: (e)->\n    list    = @getComponentList()\n    details = @getComponentDetails() \n\n    if Luca.isBackboneModel(e) \n      model = e\n      index = list.getCollection().indexOf(model)\n      row   = list.$(\"tr[data-index='#{ index }']\")\n    else\n      $target   = @$(e.target)\n      row       = $target.parents('tr').eq(0)\n      index     = row.data('index')\n      model     = list.getCollection().at(index) \n\n    list.$('tr').removeClass('info')\n    row.addClass('info')\n    details.load(model)\n\n"},{"source":"./source/javascripts/docs/views/pages/examples_browser/docs.coffee","defined_in_file":"./source/javascripts/docs/views/pages/examples_browser/docs.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.ExampleDocs","header_documentation":"","type_alias":"example_docs","css_class_identifier":"docs-example-docs","defines_methods":{"beforeRender":{"defined_on_line":6,"documentation":"","arguments":[]}},"defines_properties":{"collection":{"defined_on_line":4,"documentation":"","default":"\"docs_documentation\""},"displayHeader":{"defined_on_line":5,"documentation":"","default":"true"}},"source_file_contents":"view = Docs.register  \"Docs.views.ExampleDocs\"\nview.extends          \"Docs.views.ComponentDocumentation\"\nview.defines\n  collection: \"docs_documentation\"\n  displayHeader: true\n  beforeRender: ()->\n    component = @collection.detect (component)=>\n      component.get(\"type_alias\") is @example\n\n    if component?\n      @loadComponent(component)\n\n"},{"source":"./source/javascripts/docs/views/pages/examples_browser/source.coffee","defined_in_file":"./source/javascripts/docs/views/pages/examples_browser/source.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.ExampleSource","header_documentation":"","type_alias":"example_source","css_class_identifier":"docs-example-source","defines_methods":{"beforeRender":{"defined_on_line":7,"documentation":"","arguments":[]}},"defines_properties":{"tagName":{"defined_on_line":4,"documentation":"","default":"\"pre\""},"className":{"defined_on_line":5,"documentation":"","default":"\"prettyprint pre-scrollable\""},"collection":{"defined_on_line":6,"documentation":"","default":"\"docs_documentation\""}},"source_file_contents":"view = Docs.register  \"Docs.views.ExampleSource\"\nview.extends          \"Luca.View\"\nview.defines\n  tagName: \"pre\"\n  className: \"prettyprint pre-scrollable\"\n  collection: \"docs_documentation\"\n  beforeRender: ()->\n    component = @collection.detect (component)=>\n      component.get(\"type_alias\") is @example\n\n    @$el.html( component.get(\"source_file_contents\") )\n    window.prettyPrint()\n\n"},{"source":"./source/javascripts/docs/views/pages/examples_browser.coffee","defined_in_file":"./source/javascripts/docs/views/pages/examples_browser.coffee","type":"component_definition","starts_on_line":4,"class_name":"Docs.views.ExamplesBrowser","header_documentation":"","type_alias":"examples_browser","css_class_identifier":"docs-examples-browser","defines_methods":{"wrapExampleComponents":{"defined_on_line":25,"documentation":"","arguments":[]},"afterInitialize":{"defined_on_line":57,"documentation":"","arguments":[]},"show":{"defined_on_line":61,"documentation":"","arguments":[{"argument":"exampleName","value":"0"},{"argument":"view","value":"\"component\""}]},"index":{"defined_on_line":67,"documentation":"","arguments":[]}},"defines_properties":{"title":{"defined_on_line":8,"documentation":"","default":"\"API Browser\""},"type":{"defined_on_line":9,"documentation":"","default":"\"api_browser\""},"name":{"defined_on_line":10,"documentation":"","default":"\"api_browser\""},"activeCard":{"defined_on_line":21,"documentation":"","default":"0"},"tab_position":{"defined_on_line":22,"documentation":"","default":"\"left\""}},"source_file_contents":"#= require_tree ./examples_browser\n#= require_self\n\npage = Docs.register \"Docs.views.ExamplesBrowser\"\npage.extends         \"Luca.containers.TabView\"\n\npage.contains\n  title: \"API Browser\"\n  type: \"api_browser\"\n  name: \"api_browser\"\n,\n  title: \"Basic FormView\"\n  type: \"basic_form_view\"\n  name: \"basic_form_view\"\n,\n  title: \"Complex Layout FormView\"\n  type: \"complex_layout_form\"\n  name: \"complex_layout_form\"\n\npage.privateConfiguration\n  activeCard: 0\n  tab_position: \"left\"\n\npage.privateMethods\n  wrapExampleComponents: ()->\n    wrapped = []\n\n    wrapped = _(@components).map (component,index)->\n      title: component.title\n      name: component.name\n      components:[\n        type: \"card\"\n        role: \"view_selector\"\n        afterInitialize: ()->\n          @$el.append(\"<h3>#{ component.title } Example</h3>\")\n        components:[\n          type: component.type\n          name: \"component\"\n        ,\n          type: \"example_source\"\n          example: component.name\n          name: \"source\"\n        ,\n          type: \"example_docs\"\n          example: component.name\n          name: \"documentation\"\n        ]        \n      ,\n        bodyTemplate: \"examples_browser/selector\"\n        bodyTemplateVars: ()->\n         example_name: component.name\n      ]\n\n    @components = wrapped\n    @components.unshift title: \"Overview\", bodyTemplate: \"examples_browser/overview\"\n\n  afterInitialize: ()->\n    @wrapExampleComponents()\n\npage.publicMethods\n  show: (exampleName=0, view=\"component\")->\n    @activate exampleName, false, ()->\n      @getViewSelector().activate(view)\n      @$(\"li\").removeClass(\"active\")\n      @$(\"li.#{view}\").addClass(\"active\")\n\n  index: ()->\n    @show()\n\npage.register()"},{"source":"./source/javascripts/docs/views/pages/home.coffee","defined_in_file":"./source/javascripts/docs/views/pages/home.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.Home","header_documentation":"","type_alias":"home","css_class_identifier":"docs-home","defines_methods":{"index":{"defined_on_line":7,"documentation":"","arguments":[]}},"defines_properties":{"template":{"defined_on_line":4,"documentation":"","default":"\"pages/home\""}},"source_file_contents":"page = Docs.register      \"Docs.views.Home\"\npage.extends              \"Luca.components.Page\"\npage.configuration\n  template: \"pages/home\"\n\npage.defines\n  index: ()->\n    @trigger \"index\"\n\npage.register()"},{"source":"./source/javascripts/docs/views/views/form_view_examples/basic_example.coffee","defined_in_file":"./source/javascripts/docs/views/views/form_view_examples/basic_example.coffee","type":"component_definition","starts_on_line":6,"class_name":"Docs.views.BasicFormView","header_documentation":"<p>The <code>Docs.views.BasicFormView</code> is an example of the <code>Luca.components.FormView</code>.\nIn this basic example, the form contains a range of different fields.  They are\nrendered one on top of another.  You can get more advanced and nest containers within\nyour form, or use a <code>@bodyTemplate</code> and specify your own DOM structure, and assign\ncomponents to custom CSS selectors within it.</p>\n","type_alias":"basic_form_view","css_class_identifier":"docs-basic-form-view","defines_methods":{},"defines_properties":{"defaults":{"defined_on_line":12,"documentation":"<p>Any values you specify in the <code>@defaults</code> property will be\nset on each of the components in this container.</p>\n","default":null},"components":{"defined_on_line":19,"documentation":"<p>You can manually define a <code>@components</code> property, or in your component\ndefinition you can use the special <code>contains</code> directive, the only difference\nis your personal preference for readability.  I did it this way</p>\n","default":"["}},"source_file_contents":"# The `Docs.views.BasicFormView` is an example of the `Luca.components.FormView`.\n# In this basic example, the form contains a range of different fields.  They are\n# rendered one on top of another.  You can get more advanced and nest containers within\n# your form, or use a `@bodyTemplate` and specify your own DOM structure, and assign\n# components to custom CSS selectors within it.\nform = Docs.register    \"Docs.views.BasicFormView\"\nform.extends            \"Luca.components.FormView\"\n\nform.privateConfiguration\n  # Any values you specify in the `@defaults` property will be\n  # set on each of the components in this container.\n  defaults:\n    type: \"text\"\n\nform.publicConfiguration\n  # You can manually define a `@components` property, or in your component\n  # definition you can use the special `contains` directive, the only difference\n  # is your personal preference for readability.  I did it this way \n  components:[\n    label: \"Text Field One\"\n  ,\n    type: \"select\"\n    label: \"Select Field One\"\n    collection:\n      data:[\n        ['Alpha','Alpha']\n        ['Bravo','Bravo']\n        ['Charlie','Charlie']\n        ['Delta','Delta']\n      ]\n  ,\n    type: \"checkbox_field\"\n    label: \"Checkbox Field\"\n\n  ]\n\nform.register()  \n\n"},{"source":"./source/javascripts/docs/views/views/form_view_examples/complex_layout.coffee","defined_in_file":"./source/javascripts/docs/views/views/form_view_examples/complex_layout.coffee","type":"component_definition","starts_on_line":9,"class_name":"Docs.views.ComplexLayoutForm","header_documentation":"<p>The <code>Docs.views.ComplexLayoutForm</code> is an example of a <code>Luca.components.FormView</code> which contains\na nested container, and which uses the bootstrap grid helper properties <code>@rowFluid</code> and <code>@span</code> \nto arrange the nested components inside of a grid layout.\nIn addition to laying out the form components visually, there is a nested <code>Luca.containers.CardView</code>\ncomponent which shows / hides various field sets depending on what options you select on the form.\nThis is an example of how Luca framework components can be assembled together arbitrarily to build\nwhatever type of user interface you can imagine.</p>\n","type_alias":"complex_layout_form","css_class_identifier":"docs-complex-layout-form","defines_methods":{"selectGroup":{"defined_on_line":30,"documentation":"<p>The selectGroup method is bound to the componentEvent listener.  Whenever\nthe group_selector field changes its value, we want to change which field\ngroup is visible on the form.</p>\n","arguments":[]}},"defines_properties":{"rowFluid":{"defined_on_line":17,"documentation":"<p>By setting <code>@rowFluid</code> to true, this container\nwill support the twitter bootstrap grid layout.  Applying\nthe <code>@span</code> property to the direct children of this component\nwill control their width</p>\n","default":"true"},"componentEvents":{"defined_on_line":23,"documentation":"<p>Here is an example of using the <code>@componentEvents</code> property to listen\nto the change event on the select field identified by the role &#39;group_selector&#39;.\nonce that field emits its change event, we change the active display card in the\nnested card selector.</p>\n","default":null},"type":{"defined_on_line":36,"documentation":"","default":"\"container\""},"span":{"defined_on_line":37,"documentation":"","default":"6"},"components":{"defined_on_line":38,"documentation":"","default":"["}},"source_file_contents":"# The `Docs.views.ComplexLayoutForm` is an example of a `Luca.components.FormView` which contains\n# a nested container, and which uses the bootstrap grid helper properties `@rowFluid` and `@span` \n# to arrange the nested components inside of a grid layout.\n#\n# In addition to laying out the form components visually, there is a nested `Luca.containers.CardView`\n# component which shows / hides various field sets depending on what options you select on the form.\n# This is an example of how Luca framework components can be assembled together arbitrarily to build\n# whatever type of user interface you can imagine.\nform = Docs.register      \"Docs.views.ComplexLayoutForm\"\nform.extends              \"Luca.components.FormView\"\n\nform.privateConfiguration\n  # By setting `@rowFluid` to true, this container\n  # will support the twitter bootstrap grid layout.  Applying\n  # the `@span` property to the direct children of this component\n  # will control their width \n  rowFluid: true\n\n  # Here is an example of using the `@componentEvents` property to listen\n  # to the change event on the select field identified by the role 'group_selector'.\n  # once that field emits its change event, we change the active display card in the\n  # nested card selector.\n  componentEvents:\n    \"group_selector on:change\" : \"selectGroup\"\n\nform.privateMethods\n  # The selectGroup method is bound to the componentEvent listener.  Whenever\n  # the group_selector field changes its value, we want to change which field\n  # group is visible on the form.\n  selectGroup: ()->\n    desiredGroup = @getGroupSelector().getValue()\n    selector = @getGroupDisplaySelector()\n    selector.activate(desiredGroup) \n\nform.contains\n  type: \"container\"\n  span: 6\n  components:[\n    type: \"text\"\n    label: \"Field One\"\n  ,\n    type: \"text\"\n    label: \"Field Two\"\n  ,\n    type: \"text\"\n    label: \"Field Three\"\n  ]\n,\n  type: \"container\"\n  span: 6\n  components:[\n    label: \"Select a Group\"\n    type: \"select\"\n    role: \"group_selector\"\n    includeBlank: false\n    valueType: \"string\"\n    collection:\n      data:[\n        [\"alpha\",\"Alpha Group\"]\n        [\"bravo\", \"Bravo Group\"]\n        [\"charlie\",\"Charlie Group\"]\n      ]\n  ,\n    type: \"card\"\n    role: \"group_display_selector\"\n    components:[\n      name: \"alpha\"\n      defaults:\n        type: \"text\"\n      components:[\n        type: \"view\"\n        tagName: \"h4\"\n        bodyTemplate: ()-> \"Group One\"\n      , \n        label: \"Alpha\"\n      ,\n        label: \"Bravo\"\n      ,\n        label: \"Charlie\"\n      ]\n    ,\n      name: \"bravo\"\n      defaults:\n        type: \"checkbox_field\"\n      components:[\n        type: \"view\"\n        tagName: \"h4\"\n        bodyTemplate: ()-> \"Group Two\"\n      ,\n        label: \"One\"\n      ,\n        label: \"Two\"\n      ]\n    ,\n      name: \"charlie\"\n      defaults:\n        type: \"button_field\"      \n      components:[\n        type: \"view\"\n        tagName: \"h4\"\n        bodyTemplate: ()-> \"Group Three\"\n      ,\n        input_value: \"Button One\"\n        icon_class: \"chevron-up\"\n      ,\n        input_value: \"Button Two\"\n        icon_class: \"pencil\"\n      ] \n    ]\n  ]"},{"source":"./source/javascripts/docs/views/views/top_navigation.coffee","defined_in_file":"./source/javascripts/docs/views/views/top_navigation.coffee","type":"component_definition","starts_on_line":1,"class_name":"Docs.views.TopNavigation","header_documentation":"","type_alias":"top_navigation","css_class_identifier":"docs-top-navigation","defines_methods":{},"defines_properties":{"brand":{"defined_on_line":4,"documentation":"","default":"\"Luca.js\""},"inverse":{"defined_on_line":5,"documentation":"","default":"true"},"orientation":{"defined_on_line":6,"documentation":"","default":"\"top\""}},"source_file_contents":"nav = Docs.register       \"Docs.views.TopNavigation\"\nnav.extends               \"Luca.components.NavBar\"\nnav.defines\n  brand: \"Luca.js\"\n  inverse: true\n  orientation: \"top\"\n"}];
