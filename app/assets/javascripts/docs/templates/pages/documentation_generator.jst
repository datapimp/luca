(function() {
  this.JST || (this.JST = {});
  this.JST["docs/templates/pages/documentation_generator"] = function(obj){var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('<h2>Component Definitions with a literate style</h2>\n<h3>Documentation as a first class citizen</h3>\n<p>Your luca components are your documentation.</p>\n<p>For an example of what i\'m talking about, check out <a href="#docs">our documentation</a> or the <a href="#examples">Examples Browser</a> which shows the component documentation and source side by side.</p>\n<p>The gem ships with a command line interface which allows you to generate a documentation source file that you can load into a special viewer component.  This site is an example of the documentation generator in action.</p>\n<pre>bundle exec luca generate docs --name=application_name --export-location=./path/to/javascripts</pre> \n<p>The header for a Luca component provides you with a very readable description of what the component is, what it extends from, any custom mixins that it relies on, as well as special header comments which get rendered through markdown to generate documentation for you.</p>\n<pre>\n# The header comments in your Luca components get rendered as\n# markdown by the Luca documentation tool that ships with the gem.\n# #### Any type of Markdown is valid here\n# Here is an code example:\n#\n#         view = new MyApp.views.CustomComponent()\n#\n# We start by creating a `Luca.ComponentDefinition` object, and \n# assigning it to the local variable \'view\':\nview = MyApp.register        "MyApp.views.CustomComponent"\n\n# We specify which component this view extends from.  The default\n# component is `Luca.View`.  When all is said and done, the\n# object we build will be passed to MyApp.views.BaseView.extend\nview.extends                 "MyApp.views.BaseView"\n\n# Mixins / Concerns are special objects which are used to decorate\n# your components with functionality.  They provide an alternative to\n# inheritance. We can specify which mixins our component uses this way, \n# which places them at the top of the definition file and makes it very \n# easy to read and understand the behavior of this component.\nview.mixesIn                 "ViewConcernOne",\n                             "ViewConcernTwo",\n                             "SomeOtherViewConcern"\n</pre>\n<p>Rather than having a single large Backbone.View.extend call which passes all properties, methods, etc in one go, the Luca component definition offers you more fine grained control over definining your prototype so that you can specify the intent of each property or method.  Is it public or private?  This makes extending from your component or modifying them in the future much easier, as they are truly self documenting.</p>\n<pre>\nview.publicConfiguration\n  # Documentation for this property is also markdown\n  # Acceptable values are:\n  # - this\n  # - that\n  # - something else\n  someProperty: "value"\n\n  # I love it.\n  someOtherProperty: "value"\n\nview.publicMethods\n  # The comments that exist above a method definition are also used by \n  # the documentation generator to provide documentation for your methods.\n  someMethod: ()->\n    @doSomething()\n</pre>\n<p>Private methods and properties are the same as everything else, but this lets the developer know that these are not necessarily meant to be modified or used by components which extend from this.</p>\n<pre>\nview.privateMethods\n  somePrivateMethod: ()->\n    console.log "hi."\n</pre>\n<p>It is generally a good practice to finish off the component definition, by registering it with the component registry:</p>\n<pre>view.register()</pre>\n<p><strong>Note:</strong>The final call to <code>register()</code> is required.  It is what ultimately makes the call to <code>Backbone.View.extend</code> when all is said and done.</p>\n\n<p>Each of these methods allow you to gradually build an object which gets passed to your extend call</p>\n<ul>\n  <li>methods</li>\n  <li>publicMethods</li>\n  <li>privateMethods</li>\n  <li>configuration</li>\n  <li>publicConfiguration</li>\n  <li>privateConfiguration</li>\n  <li>classMethods</li>\n</ul>\n\n<h3>Class methods</h3>\n<p>In addition to specifying instance properties and methods, you can define class methods as well:</p>\n<pre>\nview.classMethods\n  # This method will be available as MyApp.views.CustomComponent.customClassMethod()\n  customClassMethod: ()->\n    console.log "Called MyApp.views.CustomComponent.customClassMethod()"\n</pre>\n<h3>afterDefinition, beforeDefinition hooks</h3>\n<pre>\nview.beforeDefinition (componentDefinitionProxy)->\n  console.log "This method will be called before the component is defined."\n\nview.afterDefinition (componentDefinitionProxy)->\n  console.log "This method will be called after the component is defined."\n</pre>\n');}return __p.join('');};
}).call(this);
