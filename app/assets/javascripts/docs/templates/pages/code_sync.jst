(function() {
  this.JST || (this.JST = {});
  this.JST["docs/templates/pages/code_sync"] = function(obj){var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('<h2>Say goodbye to browser refreshing...</h2>\n\n<p>One very painful aspect of developing single page applications is having to refresh the browser all the time, and then restore the state of your application to where it was when you were testing a particular feature.</p>\n<p>Tools like LiveReload exist, and they\'re great, except they don\'t always work well with the asset pipeline.</p>\n<p>The Luca gem ships with a <a href="#docs/Luca.CodeSyncManager">Luca.CodeSyncManager</a> and an easy command line utility which keeps your application code and stylehseets in sync with the running browser session.</p>\n<h3>Check it out</h3>\n<iframe width="960" height="720" src="http://www.youtube.com/embed/qoVOK-u_EEo" frameborder="0" allowfullscreen></iframe>\n<h3>How to use it</h3>\n<p>The <code>Luca.CodeSyncManager</code> is a client side component that works with the luca\nexecutable that ships with the gem.  It listens for notifications of asset changes\n(scss,coffeescript,templates,etc) in your development directory, and applies them to the running session.\nIt works similar to tools like \'LiveReload\' but without refreshing the entire page, and with direct integration\nwith your asset pipeline / sprockets configuration.  For Luca apps specifically, it also handles changes to\ncomponent definitions more elegantly by updating live instances of your component prototypes and event handlers\nso that you don\'t have to refresh so often.</p>\n\n<h4>Setup</h4>\n\n<p>Run the luca command from your project root, and specify the name of the application you are watching:</p>\n\n<pre class="prettyprint"><code><span class="pln">  bundle </span><span class="kwd">exec</span><span class="pln"> luca sync app_name</span></code></pre>\n\n<p>The sync server runs a faye process on port 9295.  You can specify options on the command line.\nIn your browser, you can control various settings by setting the <code>Luca.config</code> values.<br>\n- Luca.config.codeSyncHost\n- Luca.config.codeSyncChannel\n- Luca.config.codeSyncStylesheetMode</p>\n\n<h4>Including in your Development Application</h4>\n\n<p>After your Luca.Application renders, just call the Luca.CodeSyncManager.setup method\nin the context of your application.</p>\n\n<pre class="prettyprint"><code><span class="pln">app </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Luca</span><span class="pun">.</span><span class="pln">getApplication</span><span class="pun">()</span><span class="pln">\napp</span><span class="pun">.</span><span class="pln">on </span><span class="str">"after:render"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Luca</span><span class="pun">.</span><span class="typ">CodeSyncManager</span><span class="pun">.</span><span class="pln">setup</span><span class="pun">,</span><span class="pln"> app</span></code></pre>\n\n<p>Or in the initialize method of your application:\n    ... \n    initialize: ()-&gt;\n      @on "after:render", Luca.CodeSyncManager.setup, @ \n    ...</p>\n\n<h4>Syncpad</h4>\n\n<p>Any assets named syncpad: syncpad.coffee, syncpad.css.css, syncpad.jst.ejs, etc are treated specially by the\ncode sync utility.  The syncpad assets are used to provide a scratch pad / test environment for your application.\nYou can write coffeescript or sass and have them live evaluated in your running browser.  </p>\n');}return __p.join('');};
}).call(this);
